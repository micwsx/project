<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.enjoy.dao.TUser">

	<!-- User fields  -->
	<resultMap type="User" id="record">
		<id column="id" property="id" javaType="java.lang.Integer" />
		<result column="userName" property="userName" javaType="java.lang.String"/>
		<result column="sex" property="sex" javaType="java.lang.Boolean"/>
		<result column="remark" property="remark" javaType="java.lang.String"/>
 		<!-- <collection property="roles" ofType="Role" columnPrefix="post_">
			<id column="id" property="id" javaType="java.lang.Integer"/>
			<result column="name" property="name" javaType="java.lang.String"/>
		</collection>  -->
	</resultMap> 
	
	<!-- User:Roles(1 association N) -->
	<resultMap type="User" id="resultMapUserRole" extends="record">
	<!-- <collection property="roles" ofType="Role" column="post_id" select="com.spring.persistance.dao.TRole.selectById"/> -->
		<collection property="roles" ofType="Role" columnPrefix="post_">
			<result column="id" property="id"/>
			<result column="name" property="name"/>
		</collection> 
	</resultMap>
	
	<select id="selectById" resultMap="resultMapUserRole" parameterType="java.lang.Integer">
		SELECT user.id, user.userName, user.sex, user.remark, role.id as post_id,role.name as post_name
		FROM user 
		LEFT JOIN userrole ON user.id=userrole.userId
		LEFT JOIN role ON userrole.roleId=role.id
		WHERE user.id=#{id,jdbcType=INTEGER};
	</select>

	<select id="selectAll" resultMap="resultMapUserRole">
		SELECT user.id, user.userName, user.sex, user.remark, role.id as post_id,role.name as post_name
		FROM user 
		LEFT JOIN userrole ON user.id=userrole.userId
		LEFT JOIN role ON userrole.roleId=role.id;
	</select>

	<select id="selectCriteria" resultMap="resultMapUserRole" parameterType="User">
		SELECT id, userName, sex, remark FROM User
		<where>
			<if test="id !=null">
				and id=#{id}
			</if>
			<if test="userName !=null">
				and userName=#{userName}
			</if>
			<if test="sex !=null">
				and sex=#{sex}
			</if>
		</where>
	</select>

	<insert id="add" parameterType="User" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO user(id, userName, sex, remark)
		VALUES(#{id},#{userName},#{sex,jdbcType=TINYINT},#{remark})
		<!-- <selectKey keyProperty="id" resultType="int" order="AFTER">
			<![CDATA[ SELECT LAST_INSERT_ID() ]]>
		</selectKey> -->
	</insert>

	<insert id="addBatch" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO user(id, userName, sex, remark)
		VALUES
		<foreach collection="list" index="0" separator="," item="user" >
			(#{user.id,jdbcType=INTEGER},#{user.userName,jdbcType=VARCHAR},#{user.sex,jdbcType=TINYINT},#{user.remark,jdbcType=VARCHAR})
		</foreach>
	</insert>
	
	<delete id="delete" parameterType="int">
		DELETE FROM user WHERE id=#{id};
	</delete>
	
	<delete id="deleteBatch" parameterType="collection">
		DELETE FROM user WHERE id in 
		<foreach collection="array" open="(" separator="," item="id" close=")">
			#{id}
		</foreach>
	</delete>

	<update id="update" parameterType="User">
		UPDATE user
		<set>
			<if test="#{userName!=null}">
				userName=#{userName},
			</if>
			<if test="#{sex!=null}">
				sex=#{sex},
			</if>
			<if test="#{remark!=null}">
				remark=#{remark},
			</if>
		</set>
		WHERE id=#{id}
	</update>
	
	<!-- 这样是不可以的 -->
	<update id="updateBatch" parameterType="java.util.List">
		<foreach collection="list" separator=";" item="user">
			UPDATE user
			<set>
				<if test="#{user.userName !=null}">
					userName=#{user.userName},
				</if>
				<if test="#{user.sex!=null}">
					sex=#{user.sex},
				</if>
				<if test="#{user.remark!=null}">
					remark=#{user.remark},
				</if>
			</set>
			where id=#{user.id}
		</foreach>
	</update>
	
	<update id="batchUpdateWithMap" parameterType="java.util.Map" >
	    UPDATE user SET sex = #{sex} WHERE id IN
	    <foreach collection="idList" index="index" item="item" open="(" separator="," close=")">
	        #{item}
	    </foreach>
	</update>
</mapper>